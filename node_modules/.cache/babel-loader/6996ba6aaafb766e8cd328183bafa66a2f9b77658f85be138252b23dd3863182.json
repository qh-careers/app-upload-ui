{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soory\\\\Documents\\\\GitHub\\\\app-upload-ui\\\\src\\\\components\\\\upload.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = () => {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [apps, setApps] = useState([]);\n  const handleFileChange = async event => {\n    const file = event.target.files[0];\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await fetch('http://127.0.0.1:5000/upload', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error('Failed to upload app');\n      }\n      const data = await response.json();\n      console.log('Upload app response:', data);\n      setApps([...apps, data.app]);\n    } catch (error) {\n      console.error('Error uploading app:', error);\n    }\n\n    // Map selected files to include a preview URL\n    //const updatedFiles = Array.from(selectedFiles).map((file) =>\n    //Object.assign(file, {\n    //preview: URL.createObjectURL(file),\n    //})\n    //);\n\n    // Update state with the new files\n    //setFiles(updatedFiles);\n  };\n  useEffect(() => {\n    // Cleanup function to revoke preview URLs when component unmounts\n    return () => {\n      files.forEach(file => URL.revokeObjectURL(file.preview));\n    };\n  }, [files]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange,\n      multiple: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: previewContainerStyle,\n      children: files.map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: filePreviewStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: file.preview,\n          alt: file.name,\n          style: imageStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)]\n      }, file.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"KgFDOFlg14q4lzSPFzzjcl7ReJo=\");\n_c = FileUpload;\nconst previewContainerStyle = {\n  display: 'flex',\n  marginTop: '20px'\n};\nconst filePreviewStyle = {\n  marginRight: '10px'\n};\nconst imageStyle = {\n  maxWidth: '100%',\n  maxHeight: '100%',\n  borderRadius: '4px'\n};\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FileUpload","_s","files","setFiles","apps","setApps","handleFileChange","event","file","target","formData","FormData","append","response","fetch","method","body","ok","Error","data","json","console","log","app","error","forEach","URL","revokeObjectURL","preview","children","type","onChange","multiple","fileName","_jsxFileName","lineNumber","columnNumber","style","previewContainerStyle","map","filePreviewStyle","src","alt","name","imageStyle","_c","display","marginTop","marginRight","maxWidth","maxHeight","borderRadius","$RefreshReg$"],"sources":["C:/Users/soory/Documents/GitHub/app-upload-ui/src/components/upload.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst FileUpload = () => {\n  const [files, setFiles] = useState([]);\n  const [apps, setApps] = useState([]);\n\n  const handleFileChange = async (event) => {\n    const file = event.target.files[0];\n    const formData = new FormData();\n    formData.append('file', file);\n\n    try {\n      const response = await fetch('http://127.0.0.1:5000/upload', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error('Failed to upload app');\n      }\n      const data = await response.json();\n      console.log('Upload app response:', data);\n      setApps([...apps, data.app]);\n    } catch (error) {\n      console.error('Error uploading app:', error);\n    }\n\n    // Map selected files to include a preview URL\n    //const updatedFiles = Array.from(selectedFiles).map((file) =>\n      //Object.assign(file, {\n        //preview: URL.createObjectURL(file),\n      //})\n    //);\n\n    // Update state with the new files\n    //setFiles(updatedFiles);\n  };\n\n  useEffect(() => {\n    // Cleanup function to revoke preview URLs when component unmounts\n    return () => {\n      files.forEach((file) => URL.revokeObjectURL(file.preview));\n    };\n  }, [files]);\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileChange} multiple />\n      <div style={previewContainerStyle}>\n        {files.map((file) => (\n          <div key={file.name} style={filePreviewStyle}>\n            <img src={file.preview} alt={file.name} style={imageStyle} />\n            <p>{file.name}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst previewContainerStyle = {\n  display: 'flex',\n  marginTop: '20px',\n};\n\nconst filePreviewStyle = {\n  marginRight: '10px',\n};\n\nconst imageStyle = {\n  maxWidth: '100%',\n  maxHeight: '100%',\n  borderRadius: '4px',\n};\n\nexport default FileUpload;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}